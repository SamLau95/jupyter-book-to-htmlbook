import shutil
from pathlib import Path
from jupyter_book_to_htmlbook.atlas import update_atlas


class TestUpdateAtlas:
    """
    Tests around updating the atlas.json file based on the information
    returned from the jupyter book to HTMLbook script.
    """

    def test_json(self, tmp_path):
        """
        Simple first smoke test to ensure processed files are being inserted
        into the "files" element in atlas.json
        """
        test_env = tmp_path / 'tmp'
        test_env.mkdir()
        shutil.copyfile('tests/example_json/atlas.json',
                        test_env / 'atlas.json')
        result = update_atlas(test_env / 'atlas.json', [
            'inserted_chapter_1.html',
            'inserted_chapter_2.html'])
        assert 'inserted_chapter_1.html' in result["files"]

    def test_json_preserve_static_files(self, tmp_path):
        """
        We want to preserve "static" files (i.e., files not expected to
        be generated by the script) within the atlas.json file. We\'ll assume
        also that the script generates "chapter"-like files, and as such we\'ll
        put them in the middle of the front and back matter.

        We should expect the files to come between [ "cover.html",
        "titlepage.html", "copyright.html", "dedication.html", "toc.html"] and
        ["ix.html", "author_bio.html", "colo.html"].
        """
        test_env = tmp_path / 'tmp'
        test_env.mkdir()
        shutil.copyfile('tests/example_json/atlas.json',
                        test_env / 'atlas.json')
        frontmatter = [
            'cover.html',
            'praise.html',
            'titlepage.html',
            'copyright.html',
            'dedication.html',
            'toc.html']
        backmatter = [
            'ix.html',
            'author_bio.html',
            'colo.html']
        inserted_files = [
            'inserted_chapter_1.html',
            'inserted_chapter_2.html']
        result = update_atlas(test_env / 'atlas.json', inserted_files)
        assert result["files"] == frontmatter + inserted_files + backmatter

    def test_bad_path(self, caplog, capsys):
        """ Handle a bad path argument gracefully """
        result = update_atlas(Path('does/not/exist.json'), ['a', 'b'])
        assert result is None
        assert "a, b" in capsys.readouterr().out
        assert "atlas.json" in caplog.text

    def test_bad_json(self, tmp_path, caplog, capsys):
        """ Handle malformed atlas.json files """

        test_env = tmp_path / 'tmp'
        test_env.mkdir()
        with open(test_env / 'atlas.json', 'wt') as f:
            f.write('{"not files": "nothing to see here!"}')

        result = update_atlas(test_env / 'atlas.json', ['a', 'b'])
        assert result is None
        assert "a, b" in capsys.readouterr().out
        assert "atlas.json" in caplog.text
